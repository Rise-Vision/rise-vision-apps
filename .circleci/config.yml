version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.1.1

commands:
  run_e2e_cases:
    description: "Runs a specific cases file as a workflow step"
    parameters:
      casesfile:
        type: string
        default: "invalid_path"
    steps:
      - attach_workspace:
          at: ~/
      # Install latest chrome
      - browser-tools/install-chrome
      - run:
          name: e2e_tests
          command: |
            export STAGE_ENV=$(cat stage.txt)
            echo "Running tests on $STAGE_ENV";
            export CHROME_VERSION=$(google-chrome --version | grep -iE "[0-9.]{10,20}")
            echo "Chrome version $CHROME_VERSION";
            TEST_FILES=$(circleci tests glob "<< parameters.casesfile >>" | circleci tests split)
            NODE_ENV=test XUNIT_FILE=~/rise-vision-apps/reports/angular-xunit.xml PROSHOT_DIR=~/rise-vision-apps/reports/screenshots DBUS_SESSION_BUS_ADDRESS=/dev/null xvfb-run -a --server-args="-screen 0 1280x800x24" node run-test.js $TEST_FILES
      - store_test_results:
          path: ~/rise-vision-apps/reports
      - store_artifacts:
          path: ~/rise-vision-apps/reports

jobs:
  dependencies:
    working_directory: ~/rise-vision-apps
    docker: &BUILDIMAGE
      - image: jenkinsrise/apps-node:10.23.2-browsers
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD 
    steps:
      - checkout
      - run:
          name: Set environment variables
          command: |
            # Set +e flag to fix issue where no stage environment is specified
            set +e
            STAGE_ENV="$(git log -1 --pretty=%B | grep '\[.*\]' |sed -e 's/.*\[\(.*\)\].*/\1/g')";
            if [ "$CIRCLE_BRANCH" == "master" ] || [ `echo $CIRCLE_BRANCH | grep -c "beta/" ` -gt 0 ]; then
              STAGE_ENV='stage-0';
            fi;
            if [ "$STAGE_ENV" == '' ]; then
              echo "Stage Environment is not defined";
              exit 1
            fi;
            echo "$STAGE_ENV" > stage.txt
            echo "Stage Environment: $STAGE_ENV";
      - run:
          name: Install npm
          command: npm install
      - run: 
          name: install bower
          command: bower install
      - persist_to_workspace:
          root: ~/
          paths:
            - rise-vision-apps/*
  test_unit:
    working_directory: ~/rise-vision-apps
    docker: *BUILDIMAGE
    steps:
      - attach_workspace:
          at: ~/
      # Install latest chrome
      - browser-tools/install-chrome
      - run: 
          name: Angular unit tests
          command: NODE_ENV=test npm run ng-test-headless      
      - run: 
          name: Angular JS unit tests
          command: NODE_ENV=test npm run test
      - store_test_results:
          path: ~/rise-vision-apps/reports
      - store_artifacts:
          path: ~/rise-vision-apps/reports
  e2e_apps_sections:
    working_directory: ~/rise-vision-apps
    docker: *BUILDIMAGE
    steps:
      - run_e2e_cases:
          casesfile: "test/e2e/apps-sections.cases.js"
  e2e_apps_sections2:
    working_directory: ~/rise-vision-apps
    docker: *BUILDIMAGE
    steps:
      - run_e2e_cases:
          casesfile: "test/e2e/apps-sections2.cases.js"
  e2e_registration:
    working_directory: ~/rise-vision-apps
    docker: *BUILDIMAGE
    steps:
      - run_e2e_cases:
          casesfile: "test/e2e/registration/registration.cases.js"
  e2e_template_editor:
    working_directory: ~/rise-vision-apps
    docker: *BUILDIMAGE
    steps:
      - run_e2e_cases:
          casesfile: "test/e2e/template-editor/template-editor.cases.js"
  e2e_template_editor2:
    working_directory: ~/rise-vision-apps
    docker: *BUILDIMAGE
    steps:
      - run_e2e_cases:
          casesfile: "test/e2e/template-editor/template-editor2.cases.js"
  e2e_template_editor3:
    working_directory: ~/rise-vision-apps
    docker: *BUILDIMAGE
    steps:
      - run_e2e_cases:
          casesfile: "test/e2e/template-editor/template-editor3.cases.js"
  test_e2e:
    working_directory: ~/rise-vision-apps
    docker: *BUILDIMAGE
    steps:
      - run: echo "e2e tests finished"
  deploy_staging:
    working_directory: ~/rise-vision-apps
    docker: *BUILDIMAGE
    steps:
      - attach_workspace:
          at: ~/
      - run: NODE_ENV=stage npm run ng-build
      - run: ssh -o StrictHostKeyChecking=no apps@webserver-stage.risevision.com 'mkdir -p /rise-front-end/apps';
      # We have 10 stage environments, apps-stage-0.risevision.com to apps-stage-9.risevision.com
      # To deploy to one of these environments a tag must be added to the commit message. For instance, [stage-0] for apps-stage-0.risevision.com.
      # If tag is missing, the [stage-0] is used.
      - run:
          name: Deploy to stage
          command: |
            export STAGE_ENV=$(cat stage.txt)
            echo "Deploying to $STAGE_ENV";
            rsync -rptz -e ssh --delete dist apps@webserver-stage.risevision.com:/rise-front-end/apps/$STAGE_ENV;
      - run: tar czvf dist.tar.gz dist
      - store_artifacts:
          path: ~/rise-vision-apps/dist.tar.gz
  deploy_beta:
    working_directory: ~/rise-vision-apps
    docker: *BUILDIMAGE
    steps:
      - attach_workspace:
          at: ~/
      - run: NODE_ENV=beta npm run ng-build
      - run: ssh -o StrictHostKeyChecking=no apps@webserver-stage.risevision.com 'mkdir -p /rise-front-end/apps';
      - run: 
          name: Deploy to beta
          command: |
            echo "Deploying to Beta Environment";
            rsync -rptz -e ssh --delete dist apps@webserver-stage.risevision.com:/rise-front-end/apps/stage-beta;
      - run: tar czvf dist.tar.gz dist
      - store_artifacts:
          path: ~/rise-vision-apps/dist.tar.gz
  deploy_production:
    working_directory: ~/rise-vision-apps
    docker: *BUILDIMAGE
    steps:
      - attach_workspace:
          at: ~/
      - run: NODE_ENV=prod npm run ng-build
      # It deploys to production server 2.
      - run: echo "deploying to production webserver1.risevision.com";
      - run: ssh -o StrictHostKeyChecking=no apps@webserver1.risevision.com 'mkdir -p /rise-front-end/apps';
      - run: rsync -rptz -e ssh --delete dist apps@webserver1.risevision.com:/rise-front-end/apps;
      # It deploys to production server 1.
      - run: echo "deploying to production webserver.risevision.com";
      - run: ssh -o StrictHostKeyChecking=no apps@webserver.risevision.com 'mkdir -p /rise-front-end/apps';
      - run: rsync -rptz -e ssh --delete dist apps@webserver.risevision.com:/rise-front-end/apps;
      - run:
          name: Check and deploy to beta if needed
          command: |
            # Set +e flag in case no branch is found
            set +e          
            BETA_BRANCH="$(git branch -a | grep 'beta/')";
            if [ "$BETA_BRANCH" != '' ]; then
              echo "Beta branch exists ($BETA_BRANCH), skipping beta deployment";
            fi;
            if [ "$BETA_BRANCH" == '' ]; then
              NODE_ENV=beta npm run ng-build
              echo "Beta branch missing, updating beta environment";
              ssh -o StrictHostKeyChecking=no apps@webserver-stage.risevision.com 'mkdir -p /rise-front-end/apps';
              rsync -rptz -e ssh --delete dist apps@webserver-stage.risevision.com:/rise-front-end/apps/stage-beta;
            fi;
      - run: tar czvf dist.tar.gz dist
      - store_artifacts:
          path: ~/rise-vision-apps/dist.tar.gz

workflows:
  version: 2
  test_and_deploy:
    jobs: 
      - dependencies:
          context:
            - docker-hub-creds
      - test_unit:
          requires:
            - dependencies
          filters:
            branches:
              ignore: /(stage).*/
      - e2e_apps_sections:
          requires:
            - test_unit
          filters:
            branches:
              ignore: /(stage).*/
      - e2e_apps_sections2:
          requires:
            - test_unit
          filters:
            branches:
              ignore: /(stage).*/
      - e2e_registration:
          requires:
            - test_unit
          filters:
            branches:
              ignore: /(stage).*/
      - e2e_template_editor:
          requires:
            - test_unit
          filters:
            branches:
              ignore: /(stage).*/
      - e2e_template_editor2:
          requires:
            - test_unit
          filters:
            branches:
              ignore: /(stage).*/
      - e2e_template_editor3:
          requires:
            - test_unit
          filters:
            branches:
              ignore: /(stage).*/
      - test_e2e:
          requires:
            - e2e_apps_sections
            - e2e_apps_sections2
            - e2e_registration
            - e2e_template_editor
            - e2e_template_editor2
            - e2e_template_editor3
          filters:
            branches:
              ignore: /(stage).*/
      - deploy_production:
          requires:
            - test_e2e
          filters:
            branches:
              only: master
      - deploy_staging:
          requires:
            - dependencies
          filters:
            branches:
              only: 
                - master
                - /(feature|fix|chore|stage).*/
      - deploy_beta:
          requires:
            - test_e2e
          filters:
            branches:
              only: /(beta).*/
